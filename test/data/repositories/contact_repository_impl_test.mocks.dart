// Mocks generated by Mockito 5.0.16 from annotations
// in contactlistwithhive/test/data/repositories/contact_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:contactlistwithhive/data/datasources/local/contact_local_datasource.dart'
    as _i2;
import 'package:contactlistwithhive/data/models/contact_model.dart' as _i5;
import 'package:contactlistwithhive/domain/entities/common/search_filter.dart'
    as _i6;
import 'package:contactlistwithhive/domain/entities/contact.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [ContactLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockContactLocalDatasource extends _i1.Mock
    implements _i2.ContactLocalDatasource {
  MockContactLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> addContact({_i4.Contact? newContact}) => (super.noSuchMethod(
      Invocation.method(#addContact, [], {#newContact: newContact}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> removeContact({String? contactId}) => (super.noSuchMethod(
      Invocation.method(#removeContact, [], {#contactId: contactId}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> updateContact({_i4.Contact? contact}) => (super.noSuchMethod(
      Invocation.method(#updateContact, [], {#contact: contact}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<List<_i5.ContactModel>> getAllContacts() =>
      (super.noSuchMethod(Invocation.method(#getAllContacts, []),
              returnValue:
                  Future<List<_i5.ContactModel>>.value(<_i5.ContactModel>[]))
          as _i3.Future<List<_i5.ContactModel>>);
  @override
  _i3.Future<List<_i5.ContactModel>> getContactsByFilter(
          {_i6.SearchFilter? filter}) =>
      (super.noSuchMethod(
              Invocation.method(#getContactsByFilter, [], {#filter: filter}),
              returnValue:
                  Future<List<_i5.ContactModel>>.value(<_i5.ContactModel>[]))
          as _i3.Future<List<_i5.ContactModel>>);
  @override
  String toString() => super.toString();
}
