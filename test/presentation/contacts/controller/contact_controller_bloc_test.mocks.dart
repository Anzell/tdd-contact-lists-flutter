// Mocks generated by Mockito 5.0.16 from annotations
// in contactlistwithhive/test/presentation/contacts/controller/contact_controller_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:contactlistwithhive/core/converters/contact.dart' as _i13;
import 'package:contactlistwithhive/core/errors/failures.dart' as _i6;
import 'package:contactlistwithhive/domain/entities/contact.dart' as _i10;
import 'package:contactlistwithhive/domain/repositories/contact_repository.dart'
    as _i2;
import 'package:contactlistwithhive/domain/usecases/contact/add_contact.dart'
    as _i4;
import 'package:contactlistwithhive/domain/usecases/contact/get_all_contacts.dart'
    as _i9;
import 'package:contactlistwithhive/domain/usecases/contact/get_contacts_by_filter.dart'
    as _i12;
import 'package:contactlistwithhive/domain/usecases/contact/remove_contact.dart'
    as _i7;
import 'package:contactlistwithhive/domain/usecases/contact/update_contact.dart'
    as _i8;
import 'package:contactlistwithhive/domain/usecases/usecase.dart' as _i11;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeContactRepository_0 extends _i1.Fake
    implements _i2.ContactRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [AddContactUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddContactUseCase extends _i1.Mock implements _i4.AddContactUseCase {
  MockAddContactUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ContactRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeContactRepository_0()) as _i2.ContactRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.None<dynamic>>> call(
          _i4.AddContactUseCaseParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i6.Failure, _i3.None<dynamic>>>.value(
              _FakeEither_1<_i6.Failure, _i3.None<dynamic>>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i3.None<dynamic>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RemoveContactUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveContactUseCase extends _i1.Mock
    implements _i7.RemoveContactUseCase {
  MockRemoveContactUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ContactRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeContactRepository_0()) as _i2.ContactRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.None<dynamic>>> call(
          _i7.RemoveContactUseCaseParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i6.Failure, _i3.None<dynamic>>>.value(
              _FakeEither_1<_i6.Failure, _i3.None<dynamic>>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i3.None<dynamic>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UpdateContactUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateContactUseCase extends _i1.Mock
    implements _i8.UpdateContactUseCase {
  MockUpdateContactUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ContactRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeContactRepository_0()) as _i2.ContactRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.None<dynamic>>> call(
          _i8.UpdateContactUseCaseParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i6.Failure, _i3.None<dynamic>>>.value(
              _FakeEither_1<_i6.Failure, _i3.None<dynamic>>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i3.None<dynamic>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetAllContactsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllContactsUseCase extends _i1.Mock
    implements _i9.GetAllContactsUseCase {
  MockGetAllContactsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ContactRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeContactRepository_0()) as _i2.ContactRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i10.Contact>>> call(
          _i11.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i3.Either<_i6.Failure, List<_i10.Contact>>>.value(
                      _FakeEither_1<_i6.Failure, List<_i10.Contact>>()))
          as _i5.Future<_i3.Either<_i6.Failure, List<_i10.Contact>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetContactsByFilterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetContactsByFilterUseCase extends _i1.Mock
    implements _i12.GetContactsByFilterUseCase {
  MockGetContactsByFilterUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ContactRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeContactRepository_0()) as _i2.ContactRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i10.Contact>>> call(
          _i12.GetContactsByFilterParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i3.Either<_i6.Failure, List<_i10.Contact>>>.value(
                      _FakeEither_1<_i6.Failure, List<_i10.Contact>>()))
          as _i5.Future<_i3.Either<_i6.Failure, List<_i10.Contact>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ContactConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockContactConverter extends _i1.Mock implements _i13.ContactConverter {
  MockContactConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Either<_i6.Failure, _i10.Contact> valueStringToContact(
          {String? name, String? number, String? id}) =>
      (super.noSuchMethod(
              Invocation.method(#valueStringToContact, [],
                  {#name: name, #number: number, #id: id}),
              returnValue: _FakeEither_1<_i6.Failure, _i10.Contact>())
          as _i3.Either<_i6.Failure, _i10.Contact>);
  @override
  String toString() => super.toString();
}
